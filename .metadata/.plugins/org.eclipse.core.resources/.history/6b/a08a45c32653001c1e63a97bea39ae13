package com.revature.service;


import java.security.InvalidParameterException;
import java.sql.SQLException;
import java.util.List;

import com.revature.dao.ReimbursementDAO;
import com.revature.exception.ReimbursementAlreadyResolvedException;
import com.revature.exception.ReimbursementNotFoundException;
import com.revature.model.Reimbursement;
import com.revature.model.User;

public class ReimbursementService {

	private ReimbursementDAO reimbursementDao;
	
	public ReimbursementService() {
		this.reimbursementDao = new ReimbursementDAO();
	}
	
	public List<Reimbursement> getAllReimbursements(User currentLoggedIn) throws SQLException {
		List<Reimbursement> listOfReimbursements = null; 
		
		if(currentLoggedIn.getUserRole().equals("Finance Manager")) {
			listOfReimbursements = this.reimbursementDao.getAllReimbursements();
			
		}else if(currentLoggedIn.getUserRole().equals("Employee")) {
			listOfReimbursements = this.reimbursementDao.getReimbursementByEmployeeId(currentLoggedIn.getUserId());
			
			
		} return listOfReimbursements;
	}


	public void changeStatus(User currentLoggedIn, String reimbursementAuthor, String status) throws SQLException, ReimbursementNotFoundException {
	
		try {
			int id = Integer.parseInt(reimbursementAuthor);

			Reimbursement reimbursement = this.reimbursementDao.getReimbursementByAuthor(reimbursementAuthor);

			if(reimbursement == null) { //check is reimbursement exists or not
				throw new ReimbursementNotFoundException ("Reimbursement with an id of " + reimbursementAuthor + " was not found");
				
			if(reimbursement.getReimbAuthor() == 0) { //if 0, no author for reimbursement yet
				this.reimbursementDao.changeStatus(id, status);
			} else { //if already updated status
				throw new ReimbursementAlreadyResolvedException("Reimbursement has already been resolved! You cannot make any other changes");
			}
				
			}
				
				
		}catch (NumberFormatException e) {
			throw new InvalidParameterException("Reimbursement id MUST be an int");
		}

		

	
	
			
}
	
